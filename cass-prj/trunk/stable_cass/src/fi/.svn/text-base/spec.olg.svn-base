program spec;

import org.fi.Util;
import org.fi.FrogServer;


// ####################################################################
// ####################################################################
// ####                                                            ####
// ####                 GENERAL                                    ####
// ####                                                            ####
// ####################################################################
// ####################################################################

public delete failover_violation(A, B) :- model::reset(_), failover_violation(A, B);

public delete count_image(A, B)      :- model::reset(_), count_image(A, B);
public delete count_edits(A, B)      :- model::reset(_), count_edits(A, B);
public delete count_edits_new(A, B)  :- model::reset(_), count_edits_new(A, B);
public delete count_image_ckpt(A, B) :- model::reset(_), count_image_ckpt(A, B);

public delete exist_image(A, B)      :- model::reset(_), exist_image(A, B);
public delete exist_edits(A, B)      :- model::reset(_), exist_edits(A, B);
public delete exist_edits_new(A, B)  :- model::reset(_), exist_edits_new(A, B);
public delete exist_image_ckpt(A, B) :- model::reset(_), exist_image_ckpt(A, B);

public delete lost_state(A) :- model::reset(_), lost_state(A);



// ####################################################################
// ####################################################################
// ####                                                            ####
// ####                 NETWORK MODEL                              ####
// ####                                                            ####
// ####################################################################
// ####################################################################


// *************************************************** REAL TABLE: 


// failover_violation <RepeatedFailNodeId, RandId>
// RepatedFailNodeId could appear many times, so we need more
// identifiers for a unique index, right now we just use a
// random variable
define(failover_violation, keys(0,1), {String, Integer});



// *************************************************** SPEC


// if we see a node being returned, but that node is already
// dead (as seen by the client!) then this is a failover violation
// because why would the client has to see the same datanode
// if it already finds out that the datanode is already dead
public
  failover_violation(NodeId, RandId) :-
  model::returned_node(NodeId),
  model::dead_nodes(NodeId, "Client") {
  RandId := Util.r8();
};



// ####################################################################
// ####################################################################
// ####                                                            ####
// ####                 STORAGE MODEL                              ####
// ####                                                            ####
// ####################################################################
// ####################################################################


// XXX TODO: FrogServer.imageFile, etc. cannot be like that
// we need to change it to be dynamic .. somehow .. 


// *************************************************** REAL TABLE: 

// server_state <PathServer, >
// the second column is just a hack to make sure that
// deletion after addition do not delete the same 
// stuff, so with the third column, we make the tuple
// looks more unique
define(server_state, keys(0), {String, String});


// XXX, I could change this into just one table, where
// the keys(0) is the filename
define(count_image     , keys(0), {String, Integer});
define(count_edits     , keys(0), {String, Integer});
define(count_edits_new , keys(0), {String, Integer});
define(count_image_ckpt, keys(0), {String, Integer});


define(exist_image     , keys(0), {String, Integer});
define(exist_edits     , keys(0), {String, Integer});
define(exist_edits_new , keys(0), {String, Integer});
define(exist_image_ckpt, keys(0), {String, Integer});


// lost_state <PathServer>
define(lost_state, keys(0), {String});


// *************************************************** EVENT TABLE:

// this is for hacking <RandomInt>
define(manual_eval, {Integer});

define(spec_init, {String});

exist_image      ("Fn", 0) :- spec_init("Fn");
exist_edits      ("Fn", 0) :- spec_init("Fn");
exist_edits_new  ("Fn", 0) :- spec_init("Fn");
exist_image_ckpt ("Fn", 0) :- spec_init("Fn");

manual_eval(Rand) :- spec_init("Fn") { Rand := Util.r(); };


// *************************************************** EVENTS:

exist_image      ("Fn", Count) :- count_image      ("Fn", Count);
exist_edits      ("Fn", Count) :- count_edits      ("Fn", Count);
exist_edits_new  ("Fn", Count) :- count_edits_new  ("Fn", Count);
exist_image_ckpt ("Fn", Count) :- count_image_ckpt ("Fn", Count);

// counting 
public count_image("Fn", count<File>) :- 
  model::storage_file(File), File == FrogServer.imageFile;

public count_image_ckpt("Fn", count<File>) :- 
  model::storage_file(File), File == FrogServer.imageCkptFile;

public count_edits("Fn", count<File>) :- 
  model::storage_file(File), File == FrogServer.editsFile;

public count_edits_new("Fn", count<File>) :- 
  model::storage_file(File), File == FrogServer.editsNewFile;


// *************************************************** SPEC

// but we need to populate the spec with 0 !!!!

// the truth table
//  FS   ED  ED-N  FS-C    Server State
// ----------------------------------------------
//   x    x    .    .      FS   + ED        
//   x    x    x    .      FS   + ED + ED-N 
//   x    x    x    x      FS   + ED + ED-N 
//   x    x    .    x      FS-C + ED        


// you also always take edits regardless what
// but you need to make that explicit!!!
public
  server_state(PathServer, FrogServer.editsFile) :-
  model::server_storage(PathServer, FrogServer.editsFile, _),
  exist_edits      ("Fn", 1);

// server_state should always reflect edits new, regardless anything
public
  server_state(PathServer, FrogServer.editsNewFile) :-
  model::server_storage(PathServer, FrogServer.editsNewFile, _),
  exist_edits_new  ("Fn", 1);

// now, you take FS-C, but not FS if ED-N does not exist, but FS-C exists
public
  server_state(PathServer, FrogServer.imageCkptFile) :-
  model::server_storage(PathServer, FrogServer.imageCkptFile, _),
  exist_edits_new  ("Fn", 0),
  exist_image_ckpt ("Fn", 1);

// if image checkpoint doesn't exist, use FS
public
  server_state(PathServer, FrogServer.imageFile) :-
  model::server_storage(PathServer, FrogServer.imageFile, _),  
  exist_image_ckpt ("Fn", 0);

// if image checkpoint exist and new exist, use FS
public
  server_state(PathServer, FrogServer.imageFile) :-
  model::server_storage(PathServer, FrogServer.imageFile, _),  
  exist_edits_new  ("Fn", 1),
  exist_image_ckpt ("Fn", 1);


// *************************************************** CHECK


//watch(lost_state, aeid);
//watch(model::user_state, aeid);
//watch(server_state, aeid);
//watch(manual_eval, aeid);

public
  lost_state(Path) :-
  model::user_state(Path),
  notin server_state(Path, _), 
  manual_eval(_);


